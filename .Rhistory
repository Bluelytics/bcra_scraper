convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
}
reservas <- parseCol('Reservas')
serie <- reservas
View(serie)
agg <- setNames(aggregate(blue$value_sell, by=list(as.Date(blue$date)), FUN=mean), c('date', 'x'))
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
ymd(min(serie$date))
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date)
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
}
reservas <- parseCol('Reservas')
#bts <- convertTs(reservas)
serie <- reservas
View(serie)
View(serie)
View(DF)
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d-%m-%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
}
reservas <- parseCol('Reservas')
#bts <- convertTs(reservas)
serie <- reservas
View(serie)
View(reservas)
View(reservas)
View(DF)
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
}
reservas <- parseCol('Reservas')
#bts <- convertTs(reservas)
serie <- reservas
View(serie)
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, agg, by="date", all.x=TRUE))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
finaldate = min(ymd(final$date))
bts <- ts(base$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
bts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
reservas <- parseCol('Reservas')
bts <- convertTs(reservas)
plot(bts)
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts)
}
procesar('Reservas')
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts)
}
procesar('Reservas')
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name)
}
procesar('Reservas')
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name, main=name)
}
procesar('Reservas')
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
procesar('TasasInteresEntrePrivadas')
procesar('TasasInteres30Dias')
procesar('BADLAR')
procesar('TasasLebac')
procesar('CambioRef')
procesar('CER')
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
procesar('TasasInteresEntrePrivadas')
procesar('TasasInteres30Dias')
procesar('BADLAR')
procesar('TasasLebac')
procesar('CambioRef')
procesar('CER')
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name, main=name)
}
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name, main=name)
return(bts)
}
procesar('PrestamosAPrivados')
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
remove <- final$x == 0
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name, main=name)
return(bts)
}
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
remove <- final$x == 0
final <- final[-remove]
final$x <- final$x[-remove]
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name, main=name)
return(bts)
}
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
remove <- final$x == 0
final <- final[-remove]
final$x <- final$x[-remove]
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name, main=name)
return(bts)
}
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
test <- parseCol('PrestamosAPrivados')
serie <- parseCol('PrestamosAPrivados')
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
remove <- final$x == 0
remove
final <- final[-remove]
final$x <- final$x[-remove]
final$x
remove
final$x
subset(final, x>0)
serie <- parseCol('PrestamosAPrivados')
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
remove <- final$x == 0
final <- subset(final, x>0)
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
serie <- parseCol('PrestamosAPrivados')
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
final <- subset(final, x>0)
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
library(RJSONIO)
library(forecast)
library(lubridate)
data <- fromJSON('initial.json')
head(data)
parseCol <- function(col){
filterCol <- function(val){
return (c(val$date, val[col]))
}
filtered <- lapply(data, filterCol)
DF <- do.call(rbind.data.frame, filtered)
colnames(DF) <- c('date', 'x')
DF$date <- as.Date(DF$date, format="%d/%m/%Y")
return (DF)
}
convertTs <- function(serie){
days <- data.frame ( date = as.Date(seq.POSIXt(ymd(min(serie$date)), ymd(max(serie$date)), by = "1 day")))
final <- na.locf(merge(days, serie, by="date", all.x=TRUE))
final$x <- as.numeric(final$x)
final <- subset(final, x>0)
finaldate = min(ymd(final$date))
myts <- ts(final$x, start=c(year(finaldate), yday(finaldate)), frequency=365)
return (myts)
}
procesar <- function(name){
columna <- parseCol(name)
bts <- convertTs(columna)
plot(bts, ylab=name, main=name)
return(bts)
}
procesar('Reservas')
procesar('Asistencia')
procesar('BaseMonetaria')
procesar('Circulacion')
procesar('BilletesPublico')
procesar('EfectivoFinanciero')
procesar('DepositosBCRA')
procesar('LEBAC')
procesar('DepositosFinancieras')
procesar('CuentasCorrientes')
procesar('CajasAhorro')
procesar('APlazo')
procesar('CEDROS')
procesar('OtrosDepositos')
procesar('PrestamosAPrivados')
